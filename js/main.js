setTimeout(() => document.querySelector(".loader").style.display = "block", 1e3); let processes = document.querySelector("#processes"), browsers = []; async function sort() { let e = [...browsers].sort((e, t) => e.ms > t.ms ? 1 : -1), t = 0; for (; browsers.length > t;)await animationChangePosition(getProcess(e[t].id, getProcess(browsers[t].id))), t++; return browsers = e, [...browsers] } function animationChangePosition(e, t) { return e.style.opacity = 0, new Promise(s => { setTimeout(function () { processes.insertBefore(e, t), setTimeout(function () { e.style.opacity = 1, s() }, 500) }, 500) }) } async function fifo() { if (disabledMethodButtons(), browsers.length > 0) { for (startAnimations(); browsers.length > 0;) { await runProcessNotPreemptive(browsers[0]), removeProcess(browsers.shift().id), await contextChange() } stopAnimations() } enableMethodButtons() } async function sjfNotPreemptive() { if (disabledMethodButtons(), browsers.length > 0) { for (startAnimations(); browsers.length > 0;) { let e = browsers.reduce((e, t) => t.ms < e.ms ? t : e); await runProcessNotPreemptive(e), browsers = browsers.filter(t => t.id != e.id), removeProcess(e.id), await contextChange() } stopAnimations() } enableMethodButtons() } async function sjfNotPreemptive() { if (disabledMethodButtons(), browsers.length > 0) { for (startAnimations(); browsers.length > 0;) { let e = browsers.reduce((e, t) => t.ms < e.ms ? t : e); await runProcessNotPreemptive(e), browsers = browsers.filter(t => t.id != e.id), removeProcess(e.id), await contextChange() } stopAnimations() } enableMethodButtons() } async function sjfPreemptive() { if (disabledMethodButtons(), browsers.length > 0) { let e; for (startAnimations(); browsers.length > 0;) { let t = browsers.reduce((e, t) => t.ms < e.ms ? t : e); e || switchProcessIcon(t.icon), e && e.id != t.id && (await contextChange(), switchProcessIcon(t.icon)), await runProcessPreemptive(t), 0 == t.ms && (browsers = browsers.filter(e => e.id != t.id), removeProcess(t.id)), e = Object.assign({}, t) } stopAnimations() } enableMethodButtons() } async function priority() { if (disabledMethodButtons(), browsers.length > 0) { let e; for (startAnimations(); browsers.length > 0;) { let t = browsers.reduce((e, t) => t.priority > e.priority ? t : e); e || switchProcessIcon(t.icon), e && e.id != t.id && (await contextChange(), switchProcessIcon(t.icon)), await runProcessPreemptive(t), 0 == t.ms && (browsers = browsers.filter(e => e.id != t.id), removeProcess(t.id)), e = Object.assign({}, t) } stopAnimations() } enableMethodButtons() } function runProcessNotPreemptive(e) { return switchProcessIcon(e.icon), new Promise(t => { let s = setInterval(() => { e.ms--, getProcess(e.id).querySelector(".process-time").textContent = e.ms + "ms", 0 == e.ms && (clearInterval(s), t()) }, 1e3) }) } function runProcessPreemptive(e) { return new Promise(t => { setTimeout(() => { e.ms--, getProcess(e.id).querySelector(".process-time").textContent = e.ms + "ms", t() }, 1e3) }) } async function roundRobin() { disabledMethodButtons(); let e = document.querySelector("#quantum"); if (browsers.length > 0) { for (startAnimations(), switchProcessIcon(browsers[0].icon); browsers.length > 0;) { let t = e.value, s = {}; for (; t > 0 && (0 != browsers[0].ms || (removeProcess(browsers[0].id), browsers.shift(), 0 != browsers.length));)s.id != browsers[0].id && (switchProcessIcon(browsers[0].icon), s = Object.assign({}, browsers[0])), await runProcessPreemptive(browsers[0]), t--; await contextChange() } stopAnimations() } enableMethodButtons() } function contextChange() { let e = document.createElement("i"); return e.classList.add("fas", "fa-cog"), removeProcessIcon().appendChild(e), new Promise(e => { setTimeout(() => { e() }, 1e3) }) } function getProcess(e) { return document.querySelector("[data-id='" + e + "']") } function addProcess(e) { let t = e.dataset.icon, s = e.dataset.ms, o = e.dataset.priority, r = browsers.length > 0 ? browsers[browsers.length - 1].id : 0; r++; let n = document.createElement("div"); n.classList.add("process"), n.setAttribute("data-id", r); let i = document.createElement("i"); i.classList.add("fab", t); let c = document.createElement("span"); c.classList.add("process-time"); let a = document.createTextNode(s + "ms"); c.appendChild(a); let l = document.createElement("span"); l.classList.add("priority-icon"); let d = 0; for (; o > d;) { let e = document.createElement("i"); e.classList.add("fas", "fa-star"), l.appendChild(e), d++ } n.appendChild(i), n.appendChild(c), n.appendChild(l), processes.appendChild(n), browsers.push({ id: r, ms: s, icon: t, priority: o }) } function switchProcessIcon(e) { let t = document.createElement("i"); return t.classList.add("fab", e), removeProcessIcon().appendChild(t), e } function startAnimations() { let e = document.querySelector(".loader"); e.style.animation = "animate 0.5s linear infinite", e.style.opacity = 1, document.querySelector("#cpu-wrapper").style.animation = "cpu 4s linear infinite" } function stopAnimations() { let e = document.querySelector(".loader"); e.style.animation = "", e.style.opacity = 0, document.querySelector("#cpu-wrapper").style.animation = "", removeProcessIcon() } function removeProcessIcon() { let e = document.querySelector("#icon-process"); return e.firstChild && e.removeChild(e.firstChild), e } function removeProcess(e) { let t = getProcess(e); processes.removeChild(t) } function disabledMethodButtons() { document.querySelectorAll(".btn-method").forEach(e => { e.setAttribute("disabled", !0), e.style.cursor = "not-allowed" }); let e = document.querySelector("#round-robin"); e.classList.add("disabled"), e.style.cursor = "not-allowed"; let t = e.querySelector("input"); t.setAttribute("disabled", !0), t.style.cursor = "not-allowed", rrButton = e.querySelector("button"), rrButton.setAttribute("disabled", !0), rrButton.style.cursor = "not-allowed" } function enableMethodButtons() { document.querySelectorAll(".btn-method").forEach(e => { e.removeAttribute("disabled"), e.style.cursor = "pointer" }); let e = document.querySelector("#round-robin"); e.classList.remove("disabled"), e.style.cursor = "default"; let t = e.querySelector("input"); t.removeAttribute("disabled"), t.style.cursor = "default", rrButton = e.querySelector("button"), rrButton.removeAttribute("disabled"), rrButton.style.cursor = "pointer" }